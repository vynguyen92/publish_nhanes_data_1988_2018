pull(all_of(weight_codename))
unique_cycles_x <- subset_x %>%
pull(SDDSRVYR) %>%
unique(.)
# print(unique_cycles_x)
num_cycles <- length(unique_cycles_x)
# print(num_cycles)
indicator_cycles = ifelse(1 %in% unique_cycles_x & 2 %in% unique_cycles_x,
"yes",
"no")
# print(indicator_cycles)
if(indicator_cycles == "yes")
{
adjusted_weights <- ifelse(subset_x$SDDSRVYR %in% c(1,2),
(2/num_cycles)*unadjusted_weights,
(1/num_cycles)*unadjusted_weights)
} else {
adjusted_weights <- (1/num_cycles)*unadjusted_weights
}
subset_x <- subset_x %>%
mutate(adjusted_weights = adjusted_weights) %>%
filter(adjusted_weights != 0)
index_chem <- which(colnames(subset_x) == x)
colnames(subset_x)[index_chem] <- "chem"
dsn_x <- svydesign(ids = ~SDMVPSU,
strata = ~SDMVSTRA,
weights = ~adjusted_weights,
nest = TRUE,
data = subset_x)
print(str(dsn_x))
# df_stats_x <- subset_x %>%
#   summarise(min = svyquantile(~chem, dsn_lead, quantiles = 0),
#           perc_10 = svyquantile(~chem, dsn_lead, quantiles = 0.1),
#           perc_25 = svyquantile(~chem, dsn_lead, quantiles = 0.25),
#           median = svyquantile(~chem, dsn_lead, quantiles = 0.5),
#           mean = svymean(~chem, dsn_lead),
#           perc_75 = svyquantile(~chem, dsn_lead, quantiles = 0.75),
#           perc_90 = svyquantile(~chem, dsn_lead, quantiles = 0.90),
#           max = svyquantile(~chem, dsn_lead, quantiles = 1)) %>%
#   mutate(variable_codename_use = x) %>%
#   mutate(variable_description_use = chemical_name) %>%
#   relocate(variable_codename_use) %>%
#   relocate(variable_description_use,
#            .after = variable_codename_use)
#
# return(df_stats_x)
}
df_stats_metals_svy <- metals_codename[1:2] %>%
map(.,
calculate_distribution_stats_svy,
nhanes_subset,
df_dictionary) %>%
bind_rows(.)
calculate_distribution_stats_svy <- function(x,
df_nhanes,
dataset_dictionary)
{
print(x)
weight_codename <- paste("WT_",
x,
sep = "")
chemical_name <- dataset_dictionary %>%
filter(variable_codename_use == x) %>%
pull(variable_description_use) %>%
unique(.)
subset_x <- df_nhanes %>%
select("SEQN",
"SEQN_new",
"SDDSRVYR",
"SDMVPSU",
"SDMVSTRA",
all_of(x),
all_of(weight_codename)) %>%
na.omit(.)
unadjusted_weights <- subset_x %>%
pull(all_of(weight_codename))
unique_cycles_x <- subset_x %>%
pull(SDDSRVYR) %>%
unique(.)
# print(unique_cycles_x)
num_cycles <- length(unique_cycles_x)
# print(num_cycles)
indicator_cycles = ifelse(1 %in% unique_cycles_x & 2 %in% unique_cycles_x,
"yes",
"no")
# print(indicator_cycles)
if(indicator_cycles == "yes")
{
adjusted_weights <- ifelse(subset_x$SDDSRVYR %in% c(1,2),
(2/num_cycles)*unadjusted_weights,
(1/num_cycles)*unadjusted_weights)
} else {
adjusted_weights <- (1/num_cycles)*unadjusted_weights
}
subset_x <- subset_x %>%
mutate(adjusted_weights = adjusted_weights) %>%
filter(adjusted_weights != 0)
index_chem <- which(colnames(subset_x) == x)
colnames(subset_x)[index_chem] <- "chem"
dsn_x <- svydesign(ids = ~SDMVPSU,
strata = ~SDMVSTRA,
weights = ~adjusted_weights,
nest = TRUE,
data = subset_x)
df_stats_x <- subset_x %>%
summarise(min = svyquantile(~chem, dsn_lead, quantiles = 0),
perc_10 = svyquantile(~chem, dsn_lead, quantiles = 0.1),
perc_25 = svyquantile(~chem, dsn_lead, quantiles = 0.25),
median = svyquantile(~chem, dsn_lead, quantiles = 0.5),
mean = svymean(~chem, dsn_lead),
perc_75 = svyquantile(~chem, dsn_lead, quantiles = 0.75),
perc_90 = svyquantile(~chem, dsn_lead, quantiles = 0.90),
max = svyquantile(~chem, dsn_lead, quantiles = 1)) %>%
mutate(variable_codename_use = x) %>%
mutate(variable_description_use = chemical_name) %>%
relocate(variable_codename_use) %>%
relocate(variable_description_use,
.after = variable_codename_use)
return(df_stats_x)
}
df_stats_metals_svy <- metals_codename[1:2] %>%
map(.,
calculate_distribution_stats_svy,
nhanes_subset,
df_dictionary) %>%
bind_rows(.)
calculate_distribution_stats_svy <- function(x,
df_nhanes,
dataset_dictionary)
{
print(x)
weight_codename <- paste("WT_",
x,
sep = "")
chemical_name <- dataset_dictionary %>%
filter(variable_codename_use == x) %>%
pull(variable_description_use) %>%
unique(.)
subset_x <- df_nhanes %>%
select("SEQN",
"SEQN_new",
"SDDSRVYR",
"SDMVPSU",
"SDMVSTRA",
all_of(x),
all_of(weight_codename)) %>%
na.omit(.)
unadjusted_weights <- subset_x %>%
pull(all_of(weight_codename))
unique_cycles_x <- subset_x %>%
pull(SDDSRVYR) %>%
unique(.)
# print(unique_cycles_x)
num_cycles <- length(unique_cycles_x)
# print(num_cycles)
indicator_cycles = ifelse(1 %in% unique_cycles_x & 2 %in% unique_cycles_x,
"yes",
"no")
# print(indicator_cycles)
if(indicator_cycles == "yes")
{
adjusted_weights <- ifelse(subset_x$SDDSRVYR %in% c(1,2),
(2/num_cycles)*unadjusted_weights,
(1/num_cycles)*unadjusted_weights)
} else {
adjusted_weights <- (1/num_cycles)*unadjusted_weights
}
subset_x <- subset_x %>%
mutate(adjusted_weights = adjusted_weights) %>%
filter(adjusted_weights != 0)
index_chem <- which(colnames(subset_x) == x)
colnames(subset_x)[index_chem] <- "chem"
dsn_x <- svydesign(ids = ~SDMVPSU,
strata = ~SDMVSTRA,
weights = ~adjusted_weights,
nest = TRUE,
data = subset_x)
df_stats_x <- subset_x %>%
summarise(min = svyquantile(~chem, dsn_x, quantiles = 0),
perc_10 = svyquantile(~chem, dsn_x, quantiles = 0.1),
perc_25 = svyquantile(~chem, dsn_x, quantiles = 0.25),
median = svyquantile(~chem, dsn_x, quantiles = 0.5),
mean = svymean(~chem, dsn_x),
perc_75 = svyquantile(~chem, dsn_x, quantiles = 0.75),
perc_90 = svyquantile(~chem, dsn_x, quantiles = 0.90),
max = svyquantile(~chem, dsn_x, quantiles = 1)) %>%
mutate(variable_codename_use = x) %>%
mutate(variable_description_use = chemical_name) %>%
relocate(variable_codename_use) %>%
relocate(variable_description_use,
.after = variable_codename_use)
return(df_stats_x)
}
df_stats_metals_svy <- metals_codename[1:2] %>%
map(.,
calculate_distribution_stats_svy,
nhanes_subset,
df_dictionary) %>%
bind_rows(.)
df_stats_metals_svy <- metals_codename[2] %>%
map(.,
calculate_distribution_stats_svy,
nhanes_subset,
df_dictionary) %>%
bind_rows(.)
df_stats_metals_svy
View(df_stats_metals_svy)
df_stats_metals_svy <- metals_codename[1] %>%
map(.,
calculate_distribution_stats_svy,
nhanes_subset,
df_dictionary) %>%
bind_rows(.)
df_stats_metals_svy <- metals_codename %>%
map(.,
calculate_distribution_stats_svy,
nhanes_subset,
df_dictionary) %>%
bind_rows(.)
calculate_distribution_stats_svy <- function(x,
df_nhanes,
dataset_dictionary)
{
print(x)
weight_codename <- paste("WT_",
x,
sep = "")
chemical_name <- dataset_dictionary %>%
filter(variable_codename_use == x) %>%
pull(variable_description_use) %>%
unique(.)
subset_x <- df_nhanes %>%
select("SEQN",
"SEQN_new",
"SDDSRVYR",
"SDMVPSU",
"SDMVSTRA",
all_of(x),
all_of(weight_codename)) %>%
na.omit(.)
unadjusted_weights <- subset_x %>%
pull(all_of(weight_codename))
unique_cycles_x <- subset_x %>%
pull(SDDSRVYR) %>%
unique(.)
# print(unique_cycles_x)
num_cycles <- length(unique_cycles_x)
# print(num_cycles)
indicator_cycles = ifelse(1 %in% unique_cycles_x & 2 %in% unique_cycles_x,
"yes",
"no")
# print(indicator_cycles)
if(indicator_cycles == "yes")
{
adjusted_weights <- ifelse(subset_x$SDDSRVYR %in% c(1,2),
(2/num_cycles)*unadjusted_weights,
(1/num_cycles)*unadjusted_weights)
} else {
adjusted_weights <- (1/num_cycles)*unadjusted_weights
}
subset_x <- subset_x %>%
mutate(adjusted_weights = adjusted_weights) %>%
filter(adjusted_weights != 0)
index_chem <- which(colnames(subset_x) == x)
colnames(subset_x)[index_chem] <- "chem"
dsn_x <- svydesign(ids = ~SDMVPSU,
strata = ~SDMVSTRA,
weights = ~adjusted_weights,
nest = TRUE,
data = subset_x)
df_stats_x <- data.frame(min = svyquantile(~chem, dsn_x, quantiles = 0),
perc_10 = svyquantile(~chem, dsn_x, quantiles = 0.1),
perc_25 = svyquantile(~chem, dsn_x, quantiles = 0.25),
median = svyquantile(~chem, dsn_x, quantiles = 0.5),
mean = svymean(~chem, dsn_x),
perc_75 = svyquantile(~chem, dsn_x, quantiles = 0.75),
perc_90 = svyquantile(~chem, dsn_x, quantiles = 0.90),
max = svyquantile(~chem, dsn_x, quantiles = 1)) %>%
mutate(variable_codename_use = x) %>%
mutate(variable_description_use = chemical_name) %>%
relocate(variable_codename_use) %>%
relocate(variable_description_use,
.after = variable_codename_use)
return(df_stats_x)
}
df_stats_metals_svy <- metals_codename[1:2] %>%
map(.,
calculate_distribution_stats_svy,
nhanes_subset,
df_dictionary) %>%
bind_rows(.)
calculate_distribution_stats_svy <- function(x,
df_nhanes,
dataset_dictionary)
{
print(x)
weight_codename <- paste("WT_",
x,
sep = "")
chemical_name <- dataset_dictionary %>%
filter(variable_codename_use == x) %>%
pull(variable_description_use) %>%
unique(.)
subset_x <- df_nhanes %>%
select("SEQN",
"SEQN_new",
"SDDSRVYR",
"SDMVPSU",
"SDMVSTRA",
all_of(x),
all_of(weight_codename)) %>%
na.omit(.)
unadjusted_weights <- subset_x %>%
pull(all_of(weight_codename))
unique_cycles_x <- subset_x %>%
pull(SDDSRVYR) %>%
unique(.)
# print(unique_cycles_x)
num_cycles <- length(unique_cycles_x)
# print(num_cycles)
indicator_cycles = ifelse(1 %in% unique_cycles_x & 2 %in% unique_cycles_x,
"yes",
"no")
# print(indicator_cycles)
if(indicator_cycles == "yes")
{
adjusted_weights <- ifelse(subset_x$SDDSRVYR %in% c(1,2),
(2/num_cycles)*unadjusted_weights,
(1/num_cycles)*unadjusted_weights)
} else {
adjusted_weights <- (1/num_cycles)*unadjusted_weights
}
subset_x <- subset_x %>%
mutate(adjusted_weights = adjusted_weights) %>%
filter(adjusted_weights != 0)
index_chem <- which(colnames(subset_x) == x)
colnames(subset_x)[index_chem] <- "chem"
dsn_x <- svydesign(ids = ~SDMVPSU,
strata = ~SDMVSTRA,
weights = ~adjusted_weights,
nest = TRUE,
data = subset_x)
df_stats_x <- data.frame("min" = svyquantile(~chem, dsn_x, quantiles = 0),
"perc_10" = svyquantile(~chem, dsn_x, quantiles = 0.1),
"perc_25" = svyquantile(~chem, dsn_x, quantiles = 0.25),
"median" = svyquantile(~chem, dsn_x, quantiles = 0.5),
"mean" = svymean(~chem, dsn_x),
"perc_75" = svyquantile(~chem, dsn_x, quantiles = 0.75),
"perc_90" = svyquantile(~chem, dsn_x, quantiles = 0.90),
"max" = svyquantile(~chem, dsn_x, quantiles = 1)) %>%
mutate(variable_codename_use = x) %>%
mutate(variable_description_use = chemical_name) %>%
relocate(variable_codename_use) %>%
relocate(variable_description_use,
.after = variable_codename_use)
return(df_stats_x)
}
df_stats_metals_svy <- metals_codename[1:2] %>%
map(.,
calculate_distribution_stats_svy,
nhanes_subset,
df_dictionary) %>%
bind_rows(.)
View(df_stats_metals)
View(df_stats_metals_svy)
calculate_distribution_stats_svy <- function(x,
df_nhanes,
dataset_dictionary)
{
print(x)
weight_codename <- paste("WT_",
x,
sep = "")
chemical_name <- dataset_dictionary %>%
filter(variable_codename_use == x) %>%
pull(variable_description_use) %>%
unique(.)
subset_x <- df_nhanes %>%
select("SEQN",
"SEQN_new",
"SDDSRVYR",
"SDMVPSU",
"SDMVSTRA",
all_of(x),
all_of(weight_codename)) %>%
na.omit(.)
unadjusted_weights <- subset_x %>%
pull(all_of(weight_codename))
unique_cycles_x <- subset_x %>%
pull(SDDSRVYR) %>%
unique(.)
# print(unique_cycles_x)
num_cycles <- length(unique_cycles_x)
# print(num_cycles)
indicator_cycles = ifelse(1 %in% unique_cycles_x & 2 %in% unique_cycles_x,
"yes",
"no")
# print(indicator_cycles)
if(indicator_cycles == "yes")
{
adjusted_weights <- ifelse(subset_x$SDDSRVYR %in% c(1,2),
(2/num_cycles)*unadjusted_weights,
(1/num_cycles)*unadjusted_weights)
} else {
adjusted_weights <- (1/num_cycles)*unadjusted_weights
}
subset_x <- subset_x %>%
mutate(adjusted_weights = adjusted_weights) %>%
filter(adjusted_weights != 0)
index_chem <- which(colnames(subset_x) == x)
colnames(subset_x)[index_chem] <- "chem"
dsn_x <- svydesign(ids = ~SDMVPSU,
strata = ~SDMVSTRA,
weights = ~adjusted_weights,
nest = TRUE,
data = subset_x)
df_stats_x <- data.frame("min" = svyquantile(~chem, dsn_x, quantiles = 0),
"perc_10" = svyquantile(~chem, dsn_x, quantiles = 0.1),
"perc_25" = svyquantile(~chem, dsn_x, quantiles = 0.25),
"median" = svyquantile(~chem, dsn_x, quantiles = 0.5),
"mean" = svymean(~chem, dsn_x),
"perc_75" = svyquantile(~chem, dsn_x, quantiles = 0.75),
"perc_90" = svyquantile(~chem, dsn_x, quantiles = 0.90),
"max" = svyquantile(~chem, dsn_x, quantiles = 1)) %>%
mutate(variable_codename_use = x) %>%
mutate(variable_description_use = chemical_name) %>%
relocate(variable_codename_use) %>%
relocate(variable_description_use,
.after = variable_codename_use)
View(df_stats_x)
return(df_stats_x)
}
df_stats_metals_svy <- metals_codename[1:2] %>%
map(.,
calculate_distribution_stats_svy,
nhanes_subset,
df_dictionary) %>%
bind_rows(.)
str(df_stats_metals_svy)
calculate_distribution_stats_svy <- function(x,
df_nhanes,
dataset_dictionary)
{
print(x)
weight_codename <- paste("WT_",
x,
sep = "")
chemical_name <- dataset_dictionary %>%
filter(variable_codename_use == x) %>%
pull(variable_description_use) %>%
unique(.)
subset_x <- df_nhanes %>%
select("SEQN",
"SEQN_new",
"SDDSRVYR",
"SDMVPSU",
"SDMVSTRA",
all_of(x),
all_of(weight_codename)) %>%
na.omit(.)
unadjusted_weights <- subset_x %>%
pull(all_of(weight_codename))
unique_cycles_x <- subset_x %>%
pull(SDDSRVYR) %>%
unique(.)
# print(unique_cycles_x)
num_cycles <- length(unique_cycles_x)
# print(num_cycles)
indicator_cycles = ifelse(1 %in% unique_cycles_x & 2 %in% unique_cycles_x,
"yes",
"no")
# print(indicator_cycles)
if(indicator_cycles == "yes")
{
adjusted_weights <- ifelse(subset_x$SDDSRVYR %in% c(1,2),
(2/num_cycles)*unadjusted_weights,
(1/num_cycles)*unadjusted_weights)
} else {
adjusted_weights <- (1/num_cycles)*unadjusted_weights
}
subset_x <- subset_x %>%
mutate(adjusted_weights = adjusted_weights) %>%
filter(adjusted_weights != 0)
index_chem <- which(colnames(subset_x) == x)
colnames(subset_x)[index_chem] <- "chem"
dsn_x <- svydesign(ids = ~SDMVPSU,
strata = ~SDMVSTRA,
weights = ~adjusted_weights,
nest = TRUE,
data = subset_x)
df_stats_x <- data.frame("min" = svyquantile(~chem, dsn_x, quantiles = 0),
"perc_10" = svyquantile(~chem, dsn_x, quantiles = 0.1),
"perc_25" = svyquantile(~chem, dsn_x, quantiles = 0.25),
"median" = svyquantile(~chem, dsn_x, quantiles = 0.5),
"mean" = svymean(~chem, dsn_x),
"perc_75" = svyquantile(~chem, dsn_x, quantiles = 0.75),
"perc_90" = svyquantile(~chem, dsn_x, quantiles = 0.90),
"max" = svyquantile(~chem, dsn_x, quantiles = 1)) #%>%
# mutate(variable_codename_use = x) %>%
# mutate(variable_description_use = chemical_name) %>%
# relocate(variable_codename_use) %>%
# relocate(variable_description_use,
#          .after = variable_codename_use)
View(df_stats_x)
return(df_stats_x)
}
df_stats_metals_svy <- metals_codename[1:2] %>%
map(.,
calculate_distribution_stats_svy,
nhanes_subset,
df_dictionary) %>%
bind_rows(.)
